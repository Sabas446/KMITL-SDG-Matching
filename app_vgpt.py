import streamlit as st
import time
from matcher import match_with_explanations
import os
import re, html

# ===== Page Configuration =====

st.set_page_config(page_title="KMITL SDG Matching for All", layout="wide", initial_sidebar_state="collapsed")

st.markdown("""
<style>
.block-container{ padding-top: 1rem; }      /* ‡∏•‡∏î‡∏ö‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏ô‡πâ‡∏≤ */
hr{ margin: .5rem 0 !important; }           /* ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÄ‡∏™‡πâ‡∏ô‡∏Ñ‡∏±‡πà‡∏ô‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏Å‡∏¥‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà */
</style>
""", unsafe_allow_html=True)

st.markdown("""
<style>
/* ‡∏à‡∏≠‡∏ó‡∏µ‡πà‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏°‡∏≤‡∏Å‡∏Ñ‡πà‡∏≠‡∏¢‡∏ö‡∏µ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡πâ‡πÅ‡∏Ñ‡∏ö‡∏•‡∏á = 4/6 ‡∏Ç‡∏≠‡∏á‡∏à‡∏≠ ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏≤‡∏á */
@media (min-width: 1280px){
  .block-container{
    max-width: 66.666vw;   /* 4 ‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏≤‡∏Å 6 */
    margin-left: auto;
    margin-right: auto;
  }
}
</style>
""", unsafe_allow_html=True)

import time
now = time.time()
from datetime import datetime, timezone, timedelta
thai_time = datetime.fromtimestamp(now, timezone(timedelta(hours=7)))

# ===== SDG Names for Display =====

sdg_names = {str(i): name for i, name in enumerate([
    "No Poverty", "Zero Hunger", "Good Health and Well-being", "Quality Education", "Gender Equality",
    "Clean Water and Sanitation", "Affordable and Clean Energy", "Decent Work and Economic Growth",
    "Industry, Innovation and Infrastructure", "Reduced Inequality", "Sustainable Cities and Communities",
    "Responsible Consumption and Production", "Climate Action", "Life Below Water", "Life on Land",
    "Peace, Justice and Strong Institutions", "Partnerships for the Goals"
], start=1)}

# ===== CSS Styling (Responsive) =====

st.markdown("""
<style>
html, body, [class*="css"] {
    font-family: 'Segoe UI', sans-serif;
    color: #333;
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

.flex-header {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 12px;
    margin-top: 30px;
    margin-bottom: 20px;
    flex-wrap: wrap;
}
.flex-header img {
    width: clamp(28px, 5vw, 48px);
    height: auto;
}
.responsive-title {
    font-size: clamp(28px, 6vw, 48px);
    font-weight: bold;
    color: #f26f21;
    text-align: center;
}

.subtitle {
    text-align: center;
    font-size: clamp(14px, 2vw, 20px);
    margin-bottom: 36px;
}

.stTextArea label {
    font-size: clamp(20px, 5vw, 36px) !important;
    font-weight: 700;
}
.stTextArea textarea {
    font-size: clamp(14px, 2.5vw, 18px) !important;
    padding: 1em;
}

.stButton > button {
    background-color: #f26f21;
    color: white;
    font-size: clamp(18px, 4vw, 28px);
    font-weight: bold;
    padding: 0.4em 1em;
    border-radius: 10px;
}
.stButton > button:hover {
    background-color: #d95400;
}

.sdg-result {
    font-size: clamp(16px, 3vw, 22px);
    color: #444;
    font-weight: 600;
    line-height: 1.4;
}

.footer {
    text-align: center;
    margin-top: 30px;
    font-size: clamp(12px, 2vw, 16px);
    color: #444;
    line-height: 1.8;
}
.footer em {
    font-size: clamp(12px, 2vw, 16px);
}
.footer small {
    font-size: clamp(10px, 1.5vw, 14px);
    color: #888;
}
</style>
""", unsafe_allow_html=True)

# ===== Header =====

st.markdown("""
<div class="flex-header">
    <div class="responsive-title">KMITL SDG Matching for All</div>
    <img src="https://raw.githubusercontent.com/Sabas446/KMITL-SDG-Matching/main/osm_logo.png">
</div>
""", unsafe_allow_html=True)

st.markdown("""
    <div class='subtitle'>
        üîç ‡πÄ‡∏ä‡πá‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ß‡πà‡∏≤‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏±‡πà‡∏á‡∏¢‡∏∑‡∏ô (SDGs) ‡πÉ‡∏î‡∏ö‡πâ‡∏≤‡∏á<br>
        ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á <strong>‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢</strong> ‡πÅ‡∏•‡∏∞ <strong>‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©</strong><br>
    </div>
""", unsafe_allow_html=True)
st.markdown("---")

# ===== Input and Submit =====

text_input = st.text_area("üì• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:", height=300)
if st.button("üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"):
    if text_input.strip() == "":
        st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏î ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
    else:
        matched_sdgs, explanations = match_with_explanations(text_input)
        # normalize types so UI and matcher agree
        matched_sdgs = [int(s) for s in matched_sdgs]
        explanations = {int(k): v for k, v in explanations.items()}
        if matched_sdgs:
            matched_sdgs = sorted(matched_sdgs, key=lambda x: int(x))
            st.success(f"‚úÖ ‡∏û‡∏ö {len(matched_sdgs)} ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á")

            # ===== Toggle ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ï‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° =====
            st.markdown("##### üìù ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö SDG (Highlight) ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å ")

            raw_text = text_input  # ‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
            # ‡∏î‡∏∂‡∏á terms ‡∏à‡∏≤‡∏Å explanations
            terms = []
            for msgs in (explanations or {}).values():
                for m in msgs or []:
                    s = str(m).strip().replace("\u200b", "")
                    m1 = re.search(r"‡∏Ñ‡πâ‡∏ô‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ (.+?) ‡∏ã‡∏∂‡πà‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Layer", s)
                    if not m1:
                        m1 = re.search(r"‡∏Ñ‡πâ‡∏ô‡∏û‡∏ö‡∏ß‡πà‡∏≤ (.+?) ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô Keyword ‡∏Ç‡∏≠‡∏á SDG", s)  # ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï fallback/post
                    if m1:
                        terms.append(m1.group(1))

            # ‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥ + ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏≥‡∏¢‡∏≤‡∏ß‡∏Å‡πà‡∏≠‡∏ô (‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≠‡∏ô‡∏ó‡∏±‡∏ö)
            terms = sorted(set(terms), key=lambda x: -len(x))

            def build_spans(text: str, terms: list[str]):
                spans = []
                lower = text.lower()
                occupied = [False] * len(text)

                for term in terms:
                    if not term: 
                        continue
                    pattern = re.escape(term)
                    for m in re.finditer(pattern, lower, flags=re.IGNORECASE):
                        s, e = m.start(), m.end()
                        if any(occupied[s:e]):  # ‡∏ñ‡πâ‡∏≤‡∏ó‡∏±‡∏ö‡∏Å‡∏±‡∏ö‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°
                            continue
                        for i in range(s, e):
                            occupied[i] = True
                        spans.append((s, e))
                spans.sort()
                return spans

            def render_highlight(text: str, spans: list[tuple[int,int]]):
                out, last = [], 0
                for s, e in spans:
                    out.append(html.escape(text[last:s]))
                    out.append(f"<mark class='hl'>{html.escape(text[s:e])}</mark>")
                    last = e
                out.append(html.escape(text[last:]))
                return "".join(out)

            spans = build_spans(raw_text, terms)

            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ toggle
            if spans:
                st.markdown(
                    """
                    <style>
                    mark.hl { padding: 0 .2em; border-radius: .25rem; }
                    </style>
                    """,
                    unsafe_allow_html=True
                )
                st.markdown(render_highlight(raw_text, spans), unsafe_allow_html=True)
            else:
                # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö (‡∏•‡πá‡∏≠‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏á‡∏á‡∏ß‡πà‡∏≤‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå)
                st.text_area("‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö", value=raw_text, height=220, disabled=True)


            for sdg in matched_sdgs:
                name = sdg_names.get(str(sdg), f'SDG {sdg}')
                icon_path = f"icons/{sdg}.png"
                default_icon = "icons/default.png"
                used_icon = icon_path if os.path.exists(icon_path) else default_icon if os.path.exists(default_icon) else None

                
                if used_icon:
                    cols = st.columns([0.13, 0.87])
                    with cols[0]:
                        st.image(used_icon, width=50)
                    with cols[1]:
                        st.markdown(f"<div style='display:flex; align-items:center; height:50px;'><span class='sdg-result'>SDG {sdg}: {name}</span></div>", unsafe_allow_html=True)
                else:
                    st.markdown(f"<span class='sdg-result'>SDG {sdg}: {name}</span>", unsafe_allow_html=True)

                # ===== ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏ä‡∏¥‡∏á‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û ‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ =====
                msgs = explanations.get(sdg) or explanations.get(str(sdg), [])
                if msgs:
                    for m in sorted(set(msgs)):  # ‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
                        st.markdown(f"- {m}")
                        
                base_hashtags = "#KMITL #‡∏™‡∏à‡∏• #‡∏û‡∏£‡∏∞‡∏à‡∏≠‡∏°‡πÄ‡∏Å‡∏•‡πâ‡∏≤‡∏•‡∏≤‡∏î‡∏Å‡∏£‡∏∞‡∏ö‡∏±‡∏á"
            sdg_hashtags = ' '.join([f"#SDG{sdg}" for sdg in matched_sdgs])
            full_hashtags = base_hashtags + "\n" + sdg_hashtags

            st.markdown("### ‚ú® ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå (Hashtag)")
            st.code(full_hashtags, language=None)        

        else:
            st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö SDGs ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ")



# ===== Footer =====

st.markdown("---")
st.markdown(f"""
    <div class="footer">
        <em>
            ‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏†‡∏≤‡∏¢‡πÉ‡∏ï‡πâ‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î Routine to Research (R2R) ‡πÇ‡∏î‡∏¢‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÅ‡∏ú‡∏ô ‡∏™‡∏à‡∏•.<br>
            ‡∏°‡∏∏‡πà‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö SDGs ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥<br>
            ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏±‡πà‡∏á‡∏¢‡∏∑‡∏ô‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ö‡∏±‡∏ô
        </em><br>
        <small>¬© 2025 Office of Strategy Management KMITL</small>
    </div>
""", unsafe_allow_html=True)
